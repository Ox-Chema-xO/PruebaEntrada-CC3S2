name: Trivia CI

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create .env file from GitHub secrets
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ENVIRONMENT=testing" >> .env
          echo "DEBUG=True" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and start containers
        run: |
          docker-compose build
          docker-compose up -d
      
      - name: Run tests
        run: |
          docker-compose exec -T web pytest tests/test_api.py tests/test_models_sqlite.py --cov=app --cov-report=xml
      
      - name: Copy coverage report from container
        run: |
          docker cp $(docker-compose ps -q web):/project/coverage.xml ./coverage.xml
      
      - name: Set up Python for security tools
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit bandit-sarif-formatter
      
      - name: Run Bandit security scan
        run: |
          bandit -r app/ -f txt -o bandit-report.txt || true
          echo "Bandit report:"
          cat bandit-report.txt
      
      - name: Generate SARIF report for GitHub Security
        run: |
          bandit -r app/ -f sarif -o bandit-results.sarif || true
      
      - name: Upload SARIF report to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit-results.sarif
          wait-for-processing: true
      
      - name: Check for high severity issues
        run: |
          if grep -q "Issue: \[High\]" bandit-report.txt; then
            echo "::warning::High severity security issues found!"
            grep -n "Issue: \[High\]" bandit-report.txt
            # Descomenta la siguiente l√≠nea si quieres que el pipeline falle en caso de problemas de alta severidad
            # exit 1
          else
            echo "No high severity security issues found."
          fi
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Stop containers
        if: always()
        run: docker-compose down